{"version":3,"sources":["webpack:///./src/app/components/form-login/form-login.component.html","webpack:///./src/app/components/form-login/form-login.component.ts","webpack:///./src/app/components/form-login/module.ts","webpack:///./src/app/components/form-register/form-register.component.html","webpack:///./src/app/components/form-register/form-register.component.ts","webpack:///./src/app/components/form-register/module.ts","webpack:///./src/app/routes/home-page/home-page.component.html","webpack:///./src/app/routes/home-page/home-page.component.ts","webpack:///./src/app/routes/home-page/module.ts","webpack:///./src/app/routes/home-page/router.ts"],"names":[],"mappings":"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","file":"routes-home-page-module.js","sourcesContent":["module.exports = \"<form autocomplete=\\\"off\\\" novalidate [formGroup]=\\\"form\\\" (submit)=\\\"submitForm()\\\">\\n  <label for=\\\"email-login\\\">Email</label>\\n  <input type=\\\"email\\\" name=\\\"email-login\\\" id=\\\"email-login\\\" required minlength=\\\"5\\\" formControlName = \\\"email\\\">\\n\\n  <label for=\\\"password-login\\\">Mot de passe</label>\\n  <input type=\\\"password\\\" name=\\\"password-login\\\" id=\\\"password-login\\\" required minlength=\\\"5\\\" formControlName = \\\"password\\\">\\n\\n  <button type=\\\"submit\\\" [disabled]='!form.valid'>Connexion</button>\\n</form>\"","/* \nImports & definition \n*/\n  // Imports\n  import { Component, OnInit, Input, Output, EventEmitter, OnChanges } from '@angular/core';\n  import { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\n  // Inner\n  import { IdentityModel } from '../../models/identity.model';\n\n  // Definition\n  @Component({\n    selector: 'app-form-login',\n    templateUrl: './form-login.component.html',\n  })\n//\n\n\n/* Export */\n  export class FormLoginComponent implements OnInit, OnChanges {\n\n    /* \n    Config.\n    */\n      // Input/Output\n      @Input() resetFormData: Boolean\n      @Output() sendFormData = new EventEmitter();\n\n      // Declaration\n      public form: FormGroup;\n      public formData: IdentityModel;\n      public passwordError: Boolean = false;\n\n      // Instanciation\n      constructor(\n        private FormBuilder: FormBuilder\n      ) { };\n    //\n\n\n    /* \n    Methods\n    */\n      // Reset form\n      private resetForm = () => {\n        // Set validator\n        this.form = this.FormBuilder.group({\n          email: [undefined, Validators.required],\n          password: [undefined, Validators.required]\n        });\n\n        // Set form data obbject\n        this.formData = {\n          email: undefined,\n          password: undefined\n        };\n      };\n\n      // Submit form\n      public submitForm = () => {\n        // Set form data\n        this.formData = {\n          email: this.form.value.email,\n          password: this.form.value.password,\n        }\n\n        // Use event emmiter\n        this.sendFormData.emit(this.formData);\n      };\n    //\n\n    /* \n    Hooks\n    */\n      ngOnInit() {\n        this.resetForm();\n      };\n\n      ngOnChanges(changes){\n        // Reset form data when user is logged\n        if( !changes.resetFormData.firstChange && changes.resetFormData.currentValue ){\n          this.resetForm();\n        };\n      };\n    //\n  };\n//","/* \nImports \n*/\n    // Angular\n    import { NgModule } from '@angular/core';\n    import { HttpClientModule } from '@angular/common/http';\n    import { CommonModule } from '@angular/common';\n    import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n    // Inner\n    import { FormLoginComponent } from \"./form-login.component\";\n// \n\n\n/* \nDefinition & export \n*/\n    @NgModule({\n        declarations: [ FormLoginComponent ],\n        imports: [ \n            CommonModule, \n            HttpClientModule,\n            FormsModule, \n            ReactiveFormsModule\n        ],\n        exports: [ FormLoginComponent ]\n    })\n\n    export class FormLoginModule {};\n//","module.exports = \"<form autocomplete=\\\"off\\\" novalidate [formGroup]=\\\"form\\\" (submit)=\\\"submitForm()\\\">\\n  <label for=\\\"firstname-register\\\">Prénom</label>\\n  <input type=\\\"text\\\" name=\\\"firstname-register\\\" id=\\\"firstname-register\\\" required formControlName = \\\"firstname\\\">\\n\\n  <label for=\\\"lastname-register\\\">Nom</label>\\n  <input type=\\\"text\\\" name=\\\"lastname-register\\\" id=\\\"lastname-register\\\" required formControlName = \\\"lastname\\\">\\n\\n  <label for=\\\"email-register\\\">Email</label>\\n  <input type=\\\"email\\\" name=\\\"email-register\\\" id=\\\"email-register\\\" required minlength=\\\"5\\\" formControlName = \\\"email\\\">\\n\\n  <label for=\\\"password-register\\\">Mot de passe</label>\\n  <input type=\\\"password\\\" name=\\\"password-register\\\" id=\\\"password-register\\\" required minlength=\\\"5\\\" formControlName = \\\"password\\\">\\n\\n  <label for=\\\"securePassword\\\">Répéter le mot de passe <span *ngIf=\\\"passwordError\\\">Incorrect</span></label>\\n  <input type=\\\"password\\\" name=\\\"securePassword\\\" id=\\\"securePassword\\\" required minlength=\\\"5\\\" formControlName = \\\"securePassword\\\">\\n\\n  <button type=\\\"submit\\\" [disabled]='!form.valid'>Inscription</button>\\n</form>\"","/* \nImports & definition \n*/\n  // Imports\n  import { Component, OnInit,Input, Output, EventEmitter, OnChanges } from '@angular/core';\n  import { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\n  // Inner\n  import { IdentityModel } from '../../models/identity.model';\n\n  // Definition\n  @Component({\n    selector: 'app-form-register',\n    templateUrl: './form-register.component.html',\n  })\n\n/* Export */\n  export class FormRegisterComponent implements OnInit, OnChanges {\n\n    /* \n    Config.\n    */\n      // Input/Output\n      @Input() resetFormData: Boolean\n      @Output() sendFormData = new EventEmitter();\n\n      // Declaration\n      public form: FormGroup;\n      public formData: IdentityModel;\n      public passwordError: Boolean = false;\n\n      // Instanciation\n      constructor(\n        private FormBuilder: FormBuilder\n      ) { };\n    //\n\n\n    /* \n    Methods\n    */\n      // Reset form\n      private resetForm = () => {\n        // Set validator\n        this.form = this.FormBuilder.group({\n          firstname: [undefined, Validators.required],\n          lastname: [undefined, Validators.required],\n          email: [undefined, Validators.required],\n          password: [undefined, Validators.required],\n          securePassword: [undefined, Validators.required]\n        });\n\n        // Set form data object\n        this.formData = {\n          firstname: undefined,\n          lastname: undefined,\n          email: undefined,\n          password: undefined,\n          securePassword: undefined\n        };\n      };\n\n      // Submit form\n      public submitForm = () => {\n        // Check passwords\n        if(this.form.value.password !== this.form.value.securePassword){ this.passwordError = true } \n        else{\n          // Set login data\n          this.formData = {\n            firstname: this.form.value.firstname,\n            lastname: this.form.value.lastname,\n            email: this.form.value.email,\n            password: this.form.value.password,\n          }\n\n          // Use event emmiter\n          this.sendFormData.emit(this.formData);\n        };\n      };\n    //\n\n    /* \n    Hooks\n    */\n      ngOnInit() {\n        this.resetForm();\n      };\n\n      ngOnChanges(changes){\n        // Reset form data when user is registed\n        if( !changes.resetFormData.firstChange && changes.resetFormData.currentValue ){\n          this.resetForm();\n        };\n      };\n    //\n  };\n//","/* \nImports \n*/\n    // Angular\n    import { NgModule } from '@angular/core';\n    import { HttpClientModule } from '@angular/common/http';\n    import { CommonModule } from '@angular/common';\n    import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n    // Inner\n    import { FormRegisterComponent } from \"./form-register.component\";\n// \n\n\n/* \nDefinition & export \n*/\n    @NgModule({\n        declarations: [ FormRegisterComponent ],\n        imports: [ \n            CommonModule, \n            HttpClientModule,\n            FormsModule, \n            ReactiveFormsModule\n        ],\n        exports: [ FormRegisterComponent ]\n    })\n\n    export class FormRegisterModule {};\n//","module.exports = \"<section class=\\\"flexBox spaceBetween\\\">\\n    <article>\\n            <h2>Connexion</h2>\\n            <app-form-login \\n            (sendFormData)=\\\"connectUser($event)\\\" \\n            [resetFormData]=\\\"resetFormDataLogin\\\"\\n            ></app-form-login>\\n            \\n            <app-form-response\\n                *ngIf=\\\"displayReturnLogin\\\"\\n                [content]=\\\"apiMessageLogin\\\"\\n                [class]=\\\"messageClassLogin\\\"\\n                (close)=\\\"displayReturnLogin = false\\\"\\n            ></app-form-response>\\n    </article>\\n    \\n    <article>\\n        <h2>Inscription</h2>\\n        <app-form-register \\n        (sendFormData)=\\\"registerUser($event)\\\" \\n        [resetFormData]=\\\"resetFormDataRegister\\\"\\n        ></app-form-register>\\n    \\n        <app-form-response\\n            *ngIf=\\\"displayReturnRegister\\\"\\n            [content]=\\\"apiMessageRegister\\\"\\n            [class]=\\\"messageClassRegister\\\"\\n            (close)=\\\"displayReturnRegister = false\\\"\\n        ></app-form-response>\\n    </article>\\n</section>\"","/* \nImports & definition \n*/\n  // Imports\n  import { Component, OnInit } from '@angular/core';\n  import { Router } from '@angular/router';\n\n  // Inner\n  import { IdentityModel } from '../../models/identity.model';\n  import { ApiResponseModel } from \"../../models/api.reponse.model\";\n  import { AuthService } from \"../../services/auth/auth-service.service\";\n\n  // Definition\n  @Component({\n    selector: 'app-home-page',\n    templateUrl: './home-page.component.html',\n    providers: [ AuthService ]\n  })\n//\n\n\n/* \nExport\n*/\n  export class HomePageComponent implements OnInit {\n\n    /* \n    Config.\n    */\n      // Register form data\n      public resetFormDataRegister: Boolean = false;\n      public displayReturnRegister: Boolean = false;\n      public messageClassRegister: String;\n      public apiMessageRegister: String;\n\n      // Login form data\n      public resetFormDataLogin: Boolean = false;\n      public displayReturnLogin: Boolean = false;\n      public messageClassLogin: String;\n      public apiMessageLogin: String;\n\n      // Module injection\n      constructor(\n        private AuthService: AuthService,\n        private router: Router\n      ) {};\n    //\n\n\n    /*\n    Methods\n    */\n      // Register new user\n      public registerUser = (data: IdentityModel) => {\n        // Send user data\n        this.AuthService.register(data)\n        .then( (apiResponse: ApiResponseModel) => {\n          // API success response\n          this.messageClassRegister = 'success';\n          this.apiMessageRegister = apiResponse.message;\n          this.displayReturnRegister = true;\n\n          // Reset form data\n          this.resetFormDataRegister = true;\n        })\n        .catch( (apiResponse: ApiResponseModel) => {\n          console.log(apiResponse)\n          // API error response\n          this.messageClassRegister = 'error';\n          this.apiMessageRegister = apiResponse.message;\n          this.displayReturnRegister = true;\n        })\n      };\n\n      // Connnect new user\n      public connectUser = (data: IdentityModel) => {\n        // Send user data\n        this.AuthService.login(data)\n        .then( (apiResponse: ApiResponseModel) => {\n          // API success response\n          this.messageClassLogin = 'success';\n          this.apiMessageLogin = apiResponse.message;\n          this.displayReturnLogin = true;\n          this.router.navigateByUrl('/me');\n\n          // Reset form data\n          this.resetFormDataLogin = true;\n        })\n        .catch( (apiResponse: ApiResponseModel) => {\n          console.log(apiResponse)\n          // API error response\n          this.messageClassLogin = 'error';\n          this.apiMessageLogin = apiResponse.message;\n          this.displayReturnLogin = true;\n        })\n      };\n    //\n\n\n    /* \n    Hooks\n    */\n      ngOnInit() { };\n    //\n  };\n//","/* \nImports \n*/\n    // Angular\n    import { NgModule } from '@angular/core';\n    import { CommonModule } from '@angular/common';\n\n    // Inner\n    import { Routing } from './router';\n    import { HomePageComponent } from './home-page.component';\n    import { FormRegisterModule } from \"../../components/form-register/module\";\n    import { FormLoginModule } from \"../../components/form-login/module\";\n    import { FormResponseModule } from \"../../components/form-response/module\";\n//\n\n\n/* \nDefinition \n*/\n    @NgModule({\n        declarations: [ HomePageComponent ],\n        imports: [ \n            CommonModule, \n            Routing,\n            FormRegisterModule,\n            FormLoginModule,\n            FormResponseModule\n        ]\n    })\n//\n\n\n/* \nExport \n*/\n    export class Module {};\n//","/* \nImports \n*/\n    import { ModuleWithProviders } from '@angular/core';\n    import { Routes, RouterModule } from '@angular/router';\n    import { HomePageComponent } from './home-page.component';\n//\n\n\n/* \nDefinition \n*/\n    const route: Routes = [\n        {\n            path: '',\n            component: HomePageComponent\n        }\n    ];\n//\n\n\n/* \nExport \n*/\n    export const Routing: ModuleWithProviders = RouterModule.forChild(route);\n//"],"sourceRoot":""}